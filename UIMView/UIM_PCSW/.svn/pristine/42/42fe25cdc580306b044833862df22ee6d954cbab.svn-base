using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Serialization;
using UIM;
using UIM_WPF.Helper;
using static UIM.ParamManager;

namespace UIM_WPF
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        List<modals.ParameterTable> livelst = new List<modals.ParameterTable>();
        List<modals.ParameterTable> paramslst = new List<modals.ParameterTable>();
        public MainWindow()
        {
            InitializeComponent();
            this.WindowState = WindowState.Maximized;
            BuildNodes();
        }
        /*
         * It buids the tree and fills the data grid
         * 
         * */
        private void BuildNodes()
        {
            modals.ParameterTable parameterTable;
            //treeLiveMainNode
            //treeDVMainNode

            TreeViewItem treeDVMainNode = new TreeViewItem();
            TreeViewItem treeParamsMainNode = new TreeViewItem();
            TreeViewItem treeLiveMainNode = new TreeViewItem();
            treeLiveMainNode.IsExpanded = true;
            treeLiveMainNode.Header = "Device 1";
            treeLiveMainNode.IsSelected = true;
            treeDVMainNode.IsExpanded = true;
            treeDVMainNode.Header = "Device 1";
            treeDVMainNode.IsSelected = true;

            treeParamsMainNode.IsExpanded = true;
            treeParamsMainNode.Header = "Device 1";
            treeParamsMainNode.IsSelected = true;

            ParamManager paramManager = new ParamManager();
            if (!File.Exists(Constants.FILENAME))
            {
                MessageBox.Show("XML File Not Present");
                return;
            }
            int ret = paramManager.ParseMeterXML(System.IO.Path.Combine(System.IO.Directory.GetCurrentDirectory(), Constants.FILENAME));
            if (Constants.RET_OK != ret)
            {
                MessageBox.Show("Parsing Failed");
                return;
            }
            ParameterContainer parameterContainer = paramManager.mParamContainer;
            foreach (ParameterGroup pGroup in parameterContainer.ParameterGroups)
            {

                TreeViewItem treeliveNode = new TreeViewItem();
                TreeViewItem treeParamsNode = new TreeViewItem();
                treeliveNode.Header = pGroup.Name;
                treeliveNode.IsExpanded = true;
                treeParamsNode.Header = pGroup.Name;
                treeParamsNode.IsExpanded = true;
                Boolean isR = false;
                Boolean isRW = false;
                foreach (Parameter parameter in pGroup.Parameters.ToList())
                {
                    parameterTable = new modals.ParameterTable();
                    parameterTable.ParameterGroupName = pGroup.Name;
                    parameterTable.Name = parameter.Name;
                    if (parameter.Elements == "1")
                    {
                        parameterTable.Value1 = parameter.Value;
                    }
                    else
                    {
                        string[] valArray = parameter.Value.Split(',');
                        for (int index = 0; index < valArray.Length; index++)
                        {
                            switch (index)
                            {
                                case 0:
                                    parameterTable.Value1 = valArray[0];
                                    break;
                                case 1:
                                    parameterTable.Value2 = valArray[1];
                                    break;
                                case 2:
                                    parameterTable.Value3 = valArray[2];
                                    break;
                                case 3:
                                    parameterTable.Value4 = valArray[3];
                                    break;
                                case 4:
                                    parameterTable.Value5 = valArray[4];
                                    break;
                                case 5:
                                    parameterTable.Value6 = valArray[5];
                                    break;
                                case 6:
                                    parameterTable.Value7 = valArray[6];
                                    break;
                                case 7:
                                    parameterTable.Value8 = valArray[7];
                                    break;
                                case 8:
                                    parameterTable.Value9 = valArray[8];
                                    break;
                                case 9:
                                    parameterTable.Value10 = valArray[9];
                                    break;
                                case 10:
                                    parameterTable.Value11 = valArray[10];
                                    break;
                                case 11:
                                    parameterTable.Value12 = valArray[11];
                                    break;

                                default:
                                    break;
                            }
                        }

                    }
                    parameterTable.Unit = Helper.Utils.getUnitStringsUS()[parameter.Unit].ToString();
                    if (parameter.RW == Constants.R)
                    {
                        isR = true;
                        TreeViewItem treeLiveInnerNode = new TreeViewItem();
                        treeLiveInnerNode.Header = String.Format(Constants.TREENODEFORMAT, parameter.Name, parameter.Value, Helper.Utils.getUnitStringsUS()[parameter.Unit].ToString());
                        treeliveNode.Items.Add(treeLiveInnerNode);
                        livelst.Add(parameterTable);
                    }
                    else if (parameter.RW == Constants.RW)
                    {
                        isRW = true;
                        paramslst.Add(parameterTable);
                    }
                }
                if (isR == true)
                {
                    treeDVMainNode.Items.Add(treeliveNode);
                }
                if (isRW == true)
                {
                    // treeParamsMainNode.Items.Add(treeParamsNode);
                }
            }
            treeViewlive.Items.Add(treeLiveMainNode);
            treeViewparams.Items.Add(treeParamsMainNode);
            treeViewDataVrtlsn.Items.Add(treeDVMainNode);
            dataGridlive.ItemsSource = livelst;
            dataGridparamas.ItemsSource = paramslst;
        }
    }
}
